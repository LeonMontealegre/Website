@import "css/shared", "css/colors", "css/circles", "css/math", "css/footer";


$shadow-angle: 45deg;


body, html {
    overflow: hidden;
}

@keyframes rotate {
    from {transform: rotate(0deg);}
    to {transform: rotate(360deg);}
}
@keyframes grow {
    from {transform: scale(1);}
    to {transform: scale(30);}
}
@keyframes fade {
    from {opacity: 1;}
    to {opacity: 0;}
}
.grow-over {
    animation: grow 2s linear 0s 1 normal;
    animation-fill-mode: forwards;

    z-index: 100;
    & p {
        animation: fade 1s linear 0s 1 normal;
        animation-fill-mode: forwards;
        backface-visibility: hidden;
        transform: translateZ(0);
    }
}


@keyframes pulseAnimation {
    0%   { transform: scale3d(1, 1, 1); }
    30%  { transform: scale3d(1.2, 1.2, 1.2); }
    70%  { transform: scale3d(0.2, 0.2, 0.2); }
    100% { transform: scale3d(1, 1, 1); }
}
@keyframes glowingAnimation {
    0%   { opacity: var(--star-brightness, 1); }
    100% { opacity: calc(var(--star-brightness, 1) * 0.5); }
}

@keyframes shootingStarAnimation {
    0% { transform: translate(0, 0); opacity: 0; }
    50% { opacity: var(--star-brightness, 1); }
    100% { transform: translate(var(--star-target-dx), var(--star-target-dy)); opacity: 0; }
}

.star {
    animation:
	    pulseAnimation var(--star-animation-duration, 3000ms) infinite backwards,
	    glowingAnimation var(--star-animation-glow-duration, 5000ms) infinite alternate backwards;

    animation-delay: var(--star-animation-delay, 0);
}
.shooting__star {
    animation:
	    shootingStarAnimation var(--star-animation-duration, 3000ms) infinite backwards;

    animation-delay: var(--star-animation-delay, 0);
}

:root {
    --h-unit: 1vh;
}

footer {
    margin-top: auto;
}


@each $i,$radius,$r,$theta,$f-size in $circles {
    .circle-#{$i} {
        position: absolute;

        width:  calc(#{2 * $radius} * var(--h-unit));
        height: calc(#{2 * $radius} * var(--h-unit));

        top:  calc(#{($r * sin($theta * 1deg) + $sun-y - $radius)} * var(--h-unit));
        left: calc(#{($r * cos($theta * 1deg) + $sun-x - $radius)} * var(--h-unit));

        background-color: nth($colors, $i);
        border-radius: 50%;

        line-height: calc(#{2 * $radius} * var(--h-unit));
        text-align: center;
        transform-origin: center;
        transition: transform 0.5s;

        $shadow-dist: $radius * 1.414 / 10;

        box-shadow: calc(#{$shadow-dist*cos($shadow-angle)} * var(--h-unit))
                    calc(#{$shadow-dist*sin($shadow-angle)} * var(--h-unit))
                    0px 0px darken(nth($colors, $i), 20%);

        & p {
            margin: 0;
            font-size: $f-size * 1vh;
        }
        &:hover {
            transform: scale($circle-expand);
        }

        @media screen and (max-aspect-ratio: 1/1) {
            width:  2vw*$radius;
            height: 2vw*$radius;

            top:  ($r * sin($theta * 1deg) + $sun-y - $radius) * 1vw;
            left: ($r * cos($theta * 1deg) + $sun-x - $radius) * 1vw;

            line-height: 2vw*$radius;

            & p {
                font-size: $f-size * 1vw;
            }

            $shadow-dist: $radius * 1.414vw / 10;
            box-shadow: $shadow-dist*cos($shadow-angle) $shadow-dist*sin($shadow-angle) 0px 0px darken(nth($colors, $i), 20%);
        }
        @media screen and (max-aspect-ratio: 4/5) {
            width:  calc(#{4/5 * 2 * $radius} * var(--h-unit));
            height: calc(#{4/5 * 2 * $radius} * var(--h-unit));

            --angle: #{$theta};

            --sin: #{sin($theta * 1deg)};
            --cos: #{cos($theta * 1deg)};

            top:  calc((#{$r} * var(--sin) + #{$sun-y - $radius}) * 4/5 * var(--h-unit));
            left: calc((#{$r} * var(--cos) + #{$sun-x - $radius}) * 4/5 * var(--h-unit));

            line-height: calc(#{4/5 * 2 * $radius} * var(--h-unit));

            & p {
                font-size: $f-size * 4/5 * 1vh;
            }

            $shadow-dist: $radius * 4/5 * 1.414 / 10;

            box-shadow: calc(#{$shadow-dist*cos($shadow-angle)} * var(--h-unit))
                        calc(#{$shadow-dist*sin($shadow-angle)} * var(--h-unit))
                        0px 0px darken(nth($colors, $i), 20%);
        }
    }

    .orbit-#{$i} {
        position: absolute;

        left: calc(#{$sun-x - $r} * var(--h-unit));
        top:  calc(#{$sun-y - $r} * var(--h-unit));

        width:  calc(#{2*$r} * var(--h-unit));
        height: calc(#{2*$r} * var(--h-unit));

        border: $orbit-w solid transparentize(desaturate(nth($colors,$i), 15%), 0.5);
        border-radius: 50%;

        box-shadow:       (5px * cos($shadow-angle)) (5px * sin($shadow-angle)) 0px 0px transparentize(darken(desaturate(nth($colors,$i), 15%), 20%), 0.4),
                    inset (5px * cos($shadow-angle)) (5px * sin($shadow-angle)) 0px 0px transparentize(darken(desaturate(nth($colors,$i), 15%), 20%), 0.4);

        @media screen and (max-aspect-ratio: 1/1) {
            left: ($sun-x - $r) * 1vw;
            top:  ($sun-y - $r) * 1vw;

            width:  2*$r * 1vw;
            height: 2*$r * 1vw;
        }
        @media screen and (max-aspect-ratio: 4/5) {
            left: calc(#{$sun-x - $r} * 4/5 * var(--h-unit));
            top:  calc(#{$sun-y - $r} * 4/5 * var(--h-unit));

            width:  calc(#{2*$r} * 4/5 * var(--h-unit));
            height: calc(#{2*$r} * 4/5 * var(--h-unit));
        }
    }
}
